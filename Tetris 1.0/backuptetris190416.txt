#include <stdio.h>
#include <time.h>
#include <stdlib.h>

#define KNRM  "\x1B[0m"
#define KRED  "\x1B[31m"
#define KGRN  "\x1B[32m"
#define KYEL  "\x1B[33m"
#define KBLU  "\x1B[34m"
#define KMAG  "\x1B[35m"
#define KCYN  "\x1B[36m"
#define KWHT  "\x1B[37m"
#define RESET "\033[0m"

#define OS 0

#ifdef __linux__
	#define OS 0
#elif _WIN32
	#define OS 1
#endif

/* Funções
 * Main
 * Libs?
 * Salvar Score em texto
 * ler entradas
 * colorir
 */

/*  COLORIDOOOOOOOOOOOOOOOOOO
 * 
 * 
 * 

int main()
{
  printf(KRED "red\n" RESET);
  printf(KGRN "green\n" RESET);
  printf(KYEL "yellow\n" RESET);
  printf(KBLU "blue\n" RESET);
  printf(KMAG "magenta\n" RESET);
  printf(KCYN "cyan\n" RESET);
  printf(KWHT "white\n" RESET);
  printf(KNRM "normal\n" RESET);

  return 0;
}
 * 
 * 
 * 
 * 
#define ANSI_COLOR_RED     "\x1b[31m"
#define ANSI_COLOR_GREEN   "\x1b[32m"
#define ANSI_COLOR_YELLOW  "\x1b[33m"
#define ANSI_COLOR_BLUE    "\x1b[34m"
#define ANSI_COLOR_MAGENTA "\x1b[35m"
#define ANSI_COLOR_CYAN    "\x1b[36m"
#define ANSI_COLOR_RESET   "\x1b[0m"

int main (int argc, char const *argv[]) {

  printf(ANSI_COLOR_RED     "This text is RED!"     ANSI_COLOR_RESET "\n");
  printf(ANSI_COLOR_GREEN   "This text is GREEN!"   ANSI_COLOR_RESET "\n");
  printf(ANSI_COLOR_YELLOW  "This text is YELLOW!"  ANSI_COLOR_RESET "\n");
  printf(ANSI_COLOR_BLUE    "This text is BLUE!"    ANSI_COLOR_RESET "\n");
  printf(ANSI_COLOR_MAGENTA "This text is MAGENTA!" ANSI_COLOR_RESET "\n");
  printf(ANSI_COLOR_CYAN    "This text is CYAN!"    ANSI_COLOR_RESET "\n");

  return 0;
}
===================================================================================
#define Color_Red "\33[0:31m\\]" // Color Start
#define Color_end "\33[0m\\]" // To flush out prev settings
#define LOG_RED(X) printf("%s %s %s",Color_Red,X,Color_end)

foo()
{
LOG_RED("This is in Red Color");
}


 */


/*
 #include<stdio.h>
#include<string.h>
#include<pthread.h>
#include<stdlib.h>
#include<unistd.h>

pthread_t tid[2];

void* doSomeThing(void *arg)
{
    unsigned long i = 0;
    pthread_t id = pthread_self();

    if(pthread_equal(id,tid[0]))
    {
        printf("\n First thread processing\n");
    }
    else
    {
        printf("\n Second thread processing\n");
    }

    for(i=0; i<(0xFFFFFFFF);i++);

    return NULL;
}

int main(void)
{
    int i = 0;
    int err;

    while(i < 2)
    {
        err = pthread_create(&(tid[i]), NULL, &doSomeThing, NULL);
        if (err != 0)
            printf("\ncan't create thread :[%s]", strerror(err));
        else
            printf("\n Thread created successfully\n");

        i++;
    }

    sleep(5);
    return 0;
}
--------------------------------------------------------------------------------------------------------------------------
 C+++++++++++++++++++++++==
 // thread example
#include <iostream>       // std::cout
#include <thread>         // std::thread
 
void foo() 
{
  // do stuff...
}

void bar(int x)
{
  // do stuff...
}

int main() 
{
  std::thread first (foo);     // spawn new thread that calls foo()
  std::thread second (bar,0);  // spawn new thread that calls bar(0)

  std::cout << "main, foo and bar now execute concurrently...\n";

  // synchronize threads:
  first.join();                // pauses until first finishes
  second.join();               // pauses until second finishes

  std::cout << "foo and bar completed.\n";

  return 0;
}
 */

#define stageSizeY 100
#define stageSizeX 25
#define scale 1 
#define layers 2 //0-stage;1-blocks;
#define fullBlock 178 //178, 219, 254

int stage[stageSizeX][stageSizeY][layers];

int random(int max){//randomiza numeros
	srand(time(NULL));
	return rand() % max;
}
void clearBlocks(){//limpa matriz dos blocos
	for(int i=0; i<stageSizeX;i++)
		for(int j=0; j<stageSizeY;j++)
			stage[i][j][1]=0;
}
void genBlock(int max_size){//gera um bloco randomico
	clearBlocks();
	int startPosX=(stageSizeX-max_size)/2;
	int currentPosY=0;
	int currentPosX=0;
	do{
		currentPosX++;	
		if (currentPosX>=startPosX){
			currentPosY++;
			currentPosX=0;
		}
	}
	while(random(8)!=1);
	int form=1;
	do{
	if(form)
		if(random(2)==0){
			for(int i=0;i<random(max_size/5*2);i++){
				if(currentPosX<max_size)
				currentPosX++;
				stage[currentPosX][currentPosY][1]=1;
				}
			form=0;
		}else{
			for(int i=0;i<random(max_size/5*2);i++){
				if(currentPosY<max_size)
				currentPosY++;
				stage[currentPosX][currentPosY][1]=1;
				}
		}
	else{
		int rand=random(3);
		if(rand==0){
			for(int i=0;i<random(max_size/5*2);i++){
				if(currentPosX>0)
				currentPosX--;
				stage[currentPosX][currentPosY][1]=1;
				}
			form=1;
		}else if(rand==1){
			for(int i=0;i<random(max_size/5*2);i++){
				if(currentPosY<max_size)
				currentPosY++;
				stage[currentPosX][currentPosY][1]=1;
				}
		}else{
			for(int i=0;i<random(max_size/5*2);i++){
				if(currentPosX<max_size)
				currentPosX++;
				stage[currentPosX][currentPosY][1]=1;
				}
		}
	}
	}while(random(20)<17);
}

int ggChecker(){//verifica se perdeu o jogo
	int gg=1;
	for(int i=0;i<stageSizeX;i++)
		if(stage[i][0][0]==0){
			gg=0;
			break;
		}
	return gg;
}

void checkStageRows(){//verifica se alguma linha do fundo tem apenas blocos
	int allOne,rows=0;
	for(int i=stageSizeX-1; i>=0;i--){
		allOne=1;
		for(int j=stageSizeY-1; j>=0;j--)
			if(stage[i][j][0]==0){
				allOne=0;
				break;
			}
		if(allOne){
			for(int k=i;k<=stageSizeY;k++)
				for(int j=stageSizeY-1; j>=0;j--){
					stage[k][j][0]==stage[k+1][j][0];
					stage[k+1][j][0]=0;
				}
			rows++;
		}
		
	}
	for(;rows>0;rows--)
		for(int i=stageSizeX-1; i>=0;i--)
		for(int j=stageSizeY-2; j>=0;j--){
				stage[i][j+1][0]=stage[i][j][0];
				stage[i][j][0]=0;
			}
		

}

int blockFoward(int steps){//avança a matriz dos blocos
	int out=1;
	for(int i=stageSizeX-1; i>=0;i--)
		for(int j=stageSizeY-1-steps; j>=0;j--){
			if(stage[i][j+steps][0]==0){
				stage[i][j+steps][1]=stage[i][j][1];
				stage[i][j][1]=0;
			}else{
				for(int k=j+1; k>stageSizeY;k++){
					stage[i][j][1]=stage[i][j+steps][1];
					stage[i][j+steps][1]=0;
				}
				if(steps==1){
					out=0;
					break;
				}else{
					steps--;
					j++;
				}
			}
		}
	return out;

}

void mixBlocks(){//mistura a matriz de blocos e a matriz do fundo
	for(int i=stageSizeX-1; i>=0;i--)
		for(int j=stageSizeY-1; j>=0;j--)
			if(stage[i][j][1]==1)
				stage[i][j][0]=stage[i][j][1];
	clearBlocks();
}

void clearStage(){//limpa a matriz do fundo
	for(int i=0; i<stageSizeX;i++)
		for(int j=0; j<stageSizeY;j++)
			stage[i][j][0]=0;
}

void flush(){//limpa o buffer para poder usar getchar
	if(OS)
		fflush(stdin);
	else
		__fpurge(stdin);
}

void clear(){//limpa a tela
	if(OS)
		system("cls");
	else
		system("clear");
}

void printStage(){//desenha tetris na tela
	clear();
	//fazer impressao de pontos na tela por cima dos blocos
	for(int i=0; i<stageSizeX;i++){
		for(int j=0; j<stageSizeY;j++)
			if(stage[i][j][0]==0&&stage[i][j][1]==0)
				printf(" ");
			else
				printf("%d",fullBlock);
		printf("\n");
	}
	
}

int main(){
	clearStage();
	
	return 0;
}
